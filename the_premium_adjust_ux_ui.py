# -*- coding: utf-8 -*-
"""The premium adjust UX UI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W02oMgSQ3z2Rr58jpxvohb_vx2QD6IJf
"""

import streamlit as st
import pandas as pd
from datetime import datetime, time
from collections import Counter

st.set_page_config(
    page_title="‡∏Ñ‡∏£‡∏±‡∏ß‡πÑ‡∏ó‡∏¢‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°",
    page_icon="üçú",
    layout="wide"
)

def get_mock_customers():
    return {
        '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡∏ß‡∏á‡∏®‡πå‡∏û‡∏±‡∏í‡∏ô‡∏≤': {
            'visits': 15,
            'preferences': ['‡πÄ‡∏ú‡πá‡∏î‡∏ô‡πâ‡∏≠‡∏¢', '‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏ú‡∏á‡∏ä‡∏π‡∏£‡∏™'],
            'allergies': ['‡∏Å‡∏∏‡πâ‡∏á'],
            'avg_spend': 2500,
            'last_visit': '2025-02-01',
            'past_orders': [
                {'date': '2025-02-01', 'meal_time': 'dinner', 'items': ['‡∏õ‡∏•‡∏≤‡∏Å‡∏∞‡∏û‡∏á‡∏ô‡∏∂‡πà‡∏á‡∏°‡∏∞‡∏ô‡∏≤‡∏ß', '‡∏ú‡∏±‡∏î‡∏ú‡∏±‡∏Å‡∏ö‡∏∏‡πâ‡∏á‡πÑ‡∏ü‡πÅ‡∏î‡∏á', '‡∏ï‡πâ‡∏°‡∏Ç‡πà‡∏≤‡πÑ‡∏Å‡πà']},
                {'date': '2025-01-15', 'meal_time': 'lunch', 'items': ['‡∏ú‡∏±‡∏î‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡∏´‡∏°‡∏π‡∏Å‡∏£‡∏≠‡∏ö', '‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á', '‡∏™‡πâ‡∏°‡∏ï‡∏≥‡πÑ‡∏ó‡∏¢']},
                {'date': '2025-01-10', 'meal_time': 'dinner', 'items': ['‡πÅ‡∏Å‡∏á‡πÄ‡∏ú‡πá‡∏î‡πÄ‡∏õ‡πá‡∏î‡∏¢‡πà‡∏≤‡∏á', '‡∏ú‡∏±‡∏î‡∏ú‡∏±‡∏Å‡∏£‡∏ß‡∏°', '‡∏ï‡πâ‡∏°‡∏Ç‡πà‡∏≤‡πÑ‡∏Å‡πà']}
            ]
        },
        '‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏¥‡∏†‡∏≤ ‡∏™‡∏∏‡∏Ç‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡πå': {
            'visits': 8,
            'preferences': ['‡∏£‡∏™‡∏à‡∏±‡∏î', '‡∏ä‡∏≠‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•'],
            'allergies': ['‡∏ñ‡∏±‡πà‡∏ß'],
            'avg_spend': 4500,
            'last_visit': '2025-02-10',
            'past_orders': [
                {'date': '2025-02-10', 'meal_time': 'dinner', 'items': ['‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á‡∏ô‡πâ‡∏≥‡∏Ç‡πâ‡∏ô', '‡∏õ‡∏•‡∏≤‡∏Å‡∏∞‡∏û‡∏á‡∏ó‡∏≠‡∏î‡∏ô‡πâ‡∏≥‡∏õ‡∏•‡∏≤', '‡∏ú‡∏±‡∏î‡∏ú‡∏±‡∏Å‡∏£‡∏ß‡∏°‡∏°‡∏¥‡∏ï‡∏£']},
                {'date': '2025-01-28', 'meal_time': 'lunch', 'items': ['‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î', '‡∏¢‡∏≥‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô', '‡πÑ‡∏Ç‡πà‡πÄ‡∏à‡∏µ‡∏¢‡∏ß‡∏õ‡∏π']},
                {'date': '2025-01-20', 'meal_time': 'dinner', 'items': ['‡∏°‡∏±‡∏™‡∏°‡∏±‡πà‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠', '‡∏ú‡∏±‡∏î‡∏ú‡∏±‡∏Å‡∏ö‡∏∏‡πâ‡∏á', '‡∏ï‡πâ‡∏°‡∏Ç‡πà‡∏≤‡πÑ‡∏Å‡πà']}
            ]
        }
    }

def get_menu_by_meal_time():
    return {
        'lunch': {
            '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß': [
                '‡∏ú‡∏±‡∏î‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡∏´‡∏°‡∏π‡∏Å‡∏£‡∏≠‡∏ö',
                '‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î',
                '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏õ‡∏π',
                '‡πÑ‡∏Ç‡πà‡πÄ‡∏à‡∏µ‡∏¢‡∏ß‡∏õ‡∏π'
            ],
            '‡∏ï‡πâ‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡∏á': [
                '‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á',
                '‡∏ï‡πâ‡∏°‡∏Ç‡πà‡∏≤‡πÑ‡∏Å‡πà',
                '‡πÅ‡∏Å‡∏á‡∏à‡∏∑‡∏î‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ',
                '‡∏ï‡πâ‡∏°‡∏ã‡∏∏‡∏õ‡πÑ‡∏Å‡πà'
            ],
            '‡∏ú‡∏±‡∏î‡∏ú‡∏±‡∏Å': [
                '‡∏ú‡∏±‡∏î‡∏ú‡∏±‡∏Å‡∏ö‡∏∏‡πâ‡∏á‡πÑ‡∏ü‡πÅ‡∏î‡∏á',
                '‡∏ú‡∏±‡∏î‡∏ú‡∏±‡∏Å‡∏£‡∏ß‡∏°‡∏°‡∏¥‡∏ï‡∏£',
                '‡∏ú‡∏±‡∏î‡∏Ñ‡∏∞‡∏ô‡πâ‡∏≤‡∏´‡∏°‡∏π‡∏Å‡∏£‡∏≠‡∏ö'
            ]
        },
        'dinner': {
            '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•': [
                '‡∏õ‡∏•‡∏≤‡∏Å‡∏∞‡∏û‡∏á‡∏ô‡∏∂‡πà‡∏á‡∏°‡∏∞‡∏ô‡∏≤‡∏ß',
                '‡∏Å‡∏∏‡πâ‡∏á‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÄ‡∏ú‡∏≤',
                '‡∏õ‡∏•‡∏≤‡∏Å‡∏∞‡∏û‡∏á‡∏ó‡∏≠‡∏î‡∏ô‡πâ‡∏≥‡∏õ‡∏•‡∏≤',
                '‡∏õ‡∏π‡∏ô‡∏¥‡πà‡∏°‡∏ú‡∏±‡∏î‡∏ú‡∏á‡∏Å‡∏∞‡∏´‡∏£‡∏µ‡πà'
            ],
            '‡πÅ‡∏Å‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏°‡∏¢‡∏≥': [
                '‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á‡∏ô‡πâ‡∏≥‡∏Ç‡πâ‡∏ô',
                '‡πÅ‡∏Å‡∏á‡πÄ‡∏ú‡πá‡∏î‡πÄ‡∏õ‡πá‡∏î‡∏¢‡πà‡∏≤‡∏á',
                '‡∏°‡∏±‡∏™‡∏°‡∏±‡πà‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠',
                '‡πÅ‡∏Å‡∏á‡∏™‡πâ‡∏°‡∏ä‡∏∞‡∏≠‡∏°‡∏Å‡∏∏‡πâ‡∏á'
            ],
            '‡∏ú‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏ó‡∏≠‡∏î': [
                '‡∏ú‡∏±‡∏î‡∏ú‡∏±‡∏Å‡∏ö‡∏∏‡πâ‡∏á‡πÑ‡∏ü‡πÅ‡∏î‡∏á',
                '‡∏ú‡∏±‡∏î‡∏ú‡∏±‡∏Å‡∏£‡∏ß‡∏°‡∏°‡∏¥‡∏ï‡∏£',
                '‡∏ú‡∏±‡∏î‡πÄ‡∏ú‡πá‡∏î‡∏õ‡∏•‡∏≤‡∏î‡∏∏‡∏Å',
                '‡∏õ‡∏•‡∏≤‡∏ó‡∏≠‡∏î‡∏™‡∏≤‡∏°‡∏£‡∏™'
            ]
        }
    }

def analyze_order_history(customer, meal_time):
    # Filter orders by meal time
    relevant_orders = [order for order in customer['past_orders']
                      if order['meal_time'] == meal_time]

    # Count item frequencies
    all_items = [item for order in relevant_orders for item in order['items']]
    item_counts = Counter(all_items)

    # Get most common items
    most_common = item_counts.most_common(3)

    # Get categories they prefer
    menu = get_menu_by_meal_time()[meal_time]
    category_counts = Counter()

    for item in all_items:
        for category, items in menu.items():
            if item in items:
                category_counts[category] += 1

    preferred_categories = category_counts.most_common(2)

    return most_common, preferred_categories

def get_recommendations(customer, meal_time, menu):
    most_common_items, preferred_categories = analyze_order_history(customer, meal_time)

    recommendations = {
        'favorites': [item[0] for item in most_common_items],
        'new_suggestions': []
    }

    # Get new suggestions from their preferred categories
    for category, _ in preferred_categories:
        category_items = menu[meal_time][category]
        new_items = [item for item in category_items
                    if item not in recommendations['favorites']
                    and item not in [i for order in customer['past_orders']
                                   for i in order['items']]]
        recommendations['new_suggestions'].extend(new_items[:2])

    return recommendations

def main():
    if 'customers' not in st.session_state:
        st.session_state.customers = get_mock_customers()
    if 'menu' not in st.session_state:
        st.session_state.menu = get_menu_by_meal_time()

    st.title("üçú ‡∏Ñ‡∏£‡∏±‡∏ß‡πÑ‡∏ó‡∏¢‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°")
    st.subheader("‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")

    # First box - Meal time selection
    col1, col2 = st.columns([1, 2])
    with col1:
        meal_time = st.radio(
            "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
            options=['lunch', 'dinner'],
            format_func=lambda x: "‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô" if x == 'lunch' else "‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô"
        )

    # Customer selection
    customer_name = st.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
        options=list(st.session_state.customers.keys())
    )

    if customer_name and meal_time:
        customer = st.session_state.customers[customer_name]

        # Order History and Recommendations Section
        st.markdown(f"### ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö{meal_time}")

        # Display last 3 orders
        history_df = pd.DataFrame([
            {
                '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': order['date'],
                '‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£': '‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô' if order['meal_time'] == 'lunch' else '‡πÄ‡∏¢‡πá‡∏ô',
                '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£': ', '.join(order['items'])
            }
            for order in customer['past_orders'][:3]  # Show only last 3 orders
        ])
        st.dataframe(history_df, use_container_width=True)

        # Get and display recommendations
        recommendations = get_recommendations(customer, meal_time, st.session_state.menu)

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("### üåü ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏à‡∏≥")
            for item in recommendations['favorites']:
                st.success(f"‚Ä¢ {item}")

        with col2:
            st.markdown("### üÜï ‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡∏°‡πà")
            for item in recommendations['new_suggestions']:
                st.info(f"‚Ä¢ {item}")

        # Customer Details Section
        st.markdown("### ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")
        col1, col2 = st.columns(2)

        with col1:
            st.write(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: {customer['visits']}")
            st.write(f"‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {customer['avg_spend']} ‡∏ö‡∏≤‡∏ó")

        with col2:
            for pref in customer['preferences']:
                st.info(f"üîµ {pref}")
            for allergy in customer['allergies']:
                st.warning(f"‚ö†Ô∏è ‡πÅ‡∏û‡πâ: {allergy}")

        # New Order Section
        st.markdown("### ‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà")
        category = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
            options=list(st.session_state.menu[meal_time].keys())
        )

        if category:
            selected_items = st.multiselect(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
                options=st.session_state.menu[meal_time][category]
            )

            if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"):
                new_order = {
                    'date': datetime.now().strftime('%Y-%m-%d'),
                    'meal_time': meal_time,
                    'items': selected_items
                }
                customer['past_orders'].insert(0, new_order)
                st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                st.write("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á:", ', '.join(selected_items))

if __name__ == "__main__":
    main()