# -*- coding: utf-8 -*-
"""Premium Thai Restuarant Intelligent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aUx6LfLXoKmujPedXNTlnKMF2kUD8HLE
"""

import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, time
import altair as alt

# Enhanced mock customer database with Thai names
def create_mock_customer_data():
    customers = {
        '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡∏ß‡∏á‡∏®‡πå‡∏û‡∏±‡∏í‡∏ô‡∏≤': {
            'visits': 15,
            'favorite_dishes': {
                'lunch': ['‡∏ú‡∏±‡∏î‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡∏´‡∏°‡∏π‡∏Å‡∏£‡∏≠‡∏ö', '‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á', '‡∏™‡πâ‡∏°‡∏ï‡∏≥‡πÑ‡∏ó‡∏¢'],
                'dinner': ['‡∏õ‡∏•‡∏≤‡∏Å‡∏∞‡∏û‡∏á‡∏ô‡∏∂‡πà‡∏á‡∏°‡∏∞‡∏ô‡∏≤‡∏ß', '‡πÅ‡∏Å‡∏á‡πÄ‡∏ú‡πá‡∏î‡πÄ‡∏õ‡πá‡∏î‡∏¢‡πà‡∏≤‡∏á', '‡∏Å‡∏∏‡πâ‡∏á‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÄ‡∏ú‡∏≤']
            },
            'preferences': ['‡πÄ‡∏ú‡πá‡∏î‡∏ô‡πâ‡∏≠‡∏¢', '‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏ú‡∏á‡∏ä‡∏π‡∏£‡∏™'],
            'allergies': ['‡∏Å‡∏∏‡πâ‡∏á'],
            'avg_spend': 2500,
            'last_visit': '2025-02-01',
            'typical_group_size': 2,
            'preferred_categories': {
                'lunch': ['‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß', '‡∏™‡πâ‡∏°‡∏ï‡∏≥'],
                'dinner': ['‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•', '‡πÅ‡∏Å‡∏á', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°']
            },
            'past_orders': [
                {'date': '2025-02-01', 'time': '19:30', 'items': ['‡∏õ‡∏•‡∏≤‡∏Å‡∏∞‡∏û‡∏á‡∏ô‡∏∂‡πà‡∏á‡∏°‡∏∞‡∏ô‡∏≤‡∏ß', '‡πÑ‡∏ß‡∏ô‡πå‡∏Ç‡∏≤‡∏ß'], 'group_size': 2},
                {'date': '2025-01-15', 'time': '12:30', 'items': ['‡∏ú‡∏±‡∏î‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡∏´‡∏°‡∏π‡∏Å‡∏£‡∏≠‡∏ö', '‡∏™‡πâ‡∏°‡∏ï‡∏≥‡πÑ‡∏ó‡∏¢'], 'group_size': 1},
            ]
        },
        '‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏¥‡∏†‡∏≤ ‡∏™‡∏∏‡∏Ç‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡πå': {
            'visits': 8,
            'favorite_dishes': {
                'lunch': ['‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î', '‡∏¢‡∏≥‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô', '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏õ‡∏π'],
                'dinner': ['‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á‡∏ô‡πâ‡∏≥‡∏Ç‡πâ‡∏ô', '‡∏õ‡∏•‡∏≤‡∏Å‡∏∞‡∏û‡∏á‡∏ó‡∏≠‡∏î‡∏ô‡πâ‡∏≥‡∏õ‡∏•‡∏≤', '‡∏°‡∏±‡∏™‡∏°‡∏±‡πà‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠']
            },
            'preferences': ['‡∏£‡∏™‡∏à‡∏±‡∏î', '‡∏ä‡∏≠‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•'],
            'allergies': ['‡∏ñ‡∏±‡πà‡∏ß'],
            'avg_spend': 4500,
            'last_visit': '2025-02-10',
            'typical_group_size': 4,
            'preferred_categories': {
                'lunch': ['‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß', '‡∏¢‡∏≥', '‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏î‡πá‡∏Å'],
                'dinner': ['‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•', '‡πÅ‡∏Å‡∏á', '‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô']
            },
            'past_orders': [
                {'date': '2025-02-10', 'time': '18:00', 'items': ['‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á‡∏ô‡πâ‡∏≥‡∏Ç‡πâ‡∏ô', '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏´‡∏°‡∏π‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡πá‡∏Å', '‡πÑ‡∏≠‡∏®‡∏Å‡∏£‡∏µ‡∏°‡∏Å‡∏∞‡∏ó‡∏¥'], 'group_size': 4},
                {'date': '2025-01-28', 'time': '13:00', 'items': ['‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î', '‡∏¢‡∏≥‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô', '‡∏ô‡πâ‡∏≥‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß'], 'group_size': 4},
            ]
        }
    }
    return customers

def create_mock_menu():
    return {
        '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ß‡πà‡∏≤‡∏á': {
            'items': ['‡∏ó‡∏≠‡∏î‡∏°‡∏±‡∏ô‡∏Å‡∏∏‡πâ‡∏á', '‡∏õ‡∏≠‡πÄ‡∏õ‡∏µ‡πä‡∏¢‡∏∞‡∏ó‡∏≠‡∏î', '‡∏Ç‡∏ô‡∏°‡∏à‡∏µ‡∏ö‡∏Å‡∏∏‡πâ‡∏á', '‡∏™‡∏∞‡πÄ‡∏ï‡πä‡∏∞‡πÑ‡∏Å‡πà'],
            'available': ['lunch', 'dinner']
        },
        '‡∏¢‡∏≥ & ‡∏™‡∏•‡∏±‡∏î': {
            'items': ['‡∏™‡πâ‡∏°‡∏ï‡∏≥‡πÑ‡∏ó‡∏¢', '‡∏¢‡∏≥‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô', '‡∏•‡∏≤‡∏ö‡∏ó‡∏≠‡∏î', '‡∏û‡∏•‡πà‡∏≤‡∏Å‡∏∏‡πâ‡∏á'],
            'available': ['lunch', 'dinner']
        },
        '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß': {
            'items': ['‡∏ú‡∏±‡∏î‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡∏´‡∏°‡∏π‡∏Å‡∏£‡∏≠‡∏ö', '‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î', '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏õ‡∏π', '‡∏£‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏∞‡πÄ‡∏•'],
            'available': ['lunch']
        },
        '‡πÅ‡∏Å‡∏á': {
            'items': ['‡πÅ‡∏Å‡∏á‡πÄ‡∏ú‡πá‡∏î‡πÄ‡∏õ‡πá‡∏î‡∏¢‡πà‡∏≤‡∏á', '‡∏°‡∏±‡∏™‡∏°‡∏±‡πà‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠', '‡πÅ‡∏Å‡∏á‡∏™‡πâ‡∏°‡∏ä‡∏∞‡∏≠‡∏°‡∏Å‡∏∏‡πâ‡∏á', '‡∏û‡∏∞‡πÅ‡∏ô‡∏á‡πÑ‡∏Å‡πà'],
            'available': ['dinner']
        },
        '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•': {
            'items': ['‡∏õ‡∏•‡∏≤‡∏Å‡∏∞‡∏û‡∏á‡∏ô‡∏∂‡πà‡∏á‡∏°‡∏∞‡∏ô‡∏≤‡∏ß', '‡∏Å‡∏∏‡πâ‡∏á‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÄ‡∏ú‡∏≤', '‡∏õ‡∏π‡∏ô‡∏¥‡πà‡∏°‡∏ú‡∏±‡∏î‡∏ú‡∏á‡∏Å‡∏∞‡∏´‡∏£‡∏µ‡πà', '‡∏´‡∏≠‡∏¢‡πÄ‡∏ä‡∏•‡∏•‡πå‡πÄ‡∏ú‡∏≤'],
            'available': ['dinner']
        },
        '‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô': {
            'items': ['‡∏Ç‡πâ‡∏≤‡∏ß‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á', '‡∏ó‡∏±‡∏ö‡∏ó‡∏¥‡∏°‡∏Å‡∏£‡∏≠‡∏ö', '‡∏ö‡∏±‡∏ß‡∏•‡∏≠‡∏¢', '‡πÑ‡∏≠‡∏®‡∏Å‡∏£‡∏µ‡∏°‡∏Å‡∏∞‡∏ó‡∏¥'],
            'available': ['lunch', 'dinner']
        }
    }

def get_current_service(current_time=None):
    if not current_time:
        current_time = datetime.now().time()
    lunch_start = time(11, 0)
    lunch_end = time(16, 0)
    return 'lunch' if lunch_start <= current_time <= lunch_end else 'dinner'

def get_recommendations(customer_data, menu, current_service, group_size):
    recommendations = {
        'must_try': [],
        'based_on_history': [],
        'group_special': []
    }

    # Filter menu items based on current service time
    available_items = []
    for category, details in menu.items():
        if current_service in details['available']:
            available_items.extend(details['items'])

    # Get customer preferences for current service
    preferred_categories = customer_data['preferred_categories'].get(current_service, [])

    # Must-try recommendations based on preferred categories
    for category in preferred_categories:
        if category in menu and current_service in menu[category]['available']:
            recommendations['must_try'].extend(
                [item for item in menu[category]['items']
                 if item not in [order['items'] for order in customer_data['past_orders']]][:2]
            )

    # Group-based recommendations
    if group_size >= 4:
        recommendations['group_special'] = [
            '‡∏ä‡∏∏‡∏î‡∏™‡∏≥‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß',
            '‡∏ä‡∏∏‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏°',
            '‡∏ä‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô‡∏£‡∏ß‡∏°'
        ]
    elif group_size == 2:
        recommendations['group_special'] = [
            '‡∏ä‡∏∏‡∏î‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å',
            '‡∏ä‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô‡∏Ñ‡∏π‡πà',
            '‡∏ä‡∏∏‡∏î‡πÑ‡∏ß‡∏ô‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©'
        ]

    return recommendations

def main():
    st.set_page_config(page_title="‡∏Ñ‡∏£‡∏±‡∏ß‡πÑ‡∏ó‡∏¢‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏° - ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", layout="wide")

    # Initialize session state
    if 'customers' not in st.session_state:
        st.session_state.customers = create_mock_customer_data()
    if 'menu' not in st.session_state:
        st.session_state.menu = create_mock_menu()

    st.title("‡∏Ñ‡∏£‡∏±‡∏ß‡πÑ‡∏ó‡∏¢‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°")
    st.subheader("‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")

    # Current service time
    current_service = get_current_service()
    st.info(f"‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_service.upper()}")

    # Customer search
    customer_name = st.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:",
        options=list(st.session_state.customers.keys())
    )

    if customer_name:
        customer = st.session_state.customers[customer_name]

        # Group size selection
        group_size = st.number_input(
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:",
            min_value=1,
            max_value=12,
            value=customer['typical_group_size']
        )

        col1, col2 = st.columns(2)

        with col1:
            st.header("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")
            st.write(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: {customer['visits']}")
            st.write(f"‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {customer['avg_spend']} ‡∏ö‡∏≤‡∏ó")
            st.write(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ: {customer['typical_group_size']}")
            st.write(f"‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {customer['last_visit']}")

            st.subheader("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö")
            for pref in customer['preferences']:
                st.info(pref)
            for allergy in customer['allergies']:
                st.warning(f"‚ö†Ô∏è ‡πÅ‡∏û‡πâ: {allergy}")

        with col2:
            st.header("‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π")
            recommendations = get_recommendations(customer, st.session_state.menu, current_service, group_size)

            st.subheader("üåü ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
            for item in recommendations['must_try']:
                st.success(item)

            st.subheader("üë• ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°")
            for item in recommendations['group_special']:
                st.info(item)

        # Order History
        st.header("‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£")
        history_df = pd.DataFrame([
            {
                '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': order['date'],
                '‡πÄ‡∏ß‡∏•‡∏≤': order['time'],
                '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£': ', '.join(order['items']),
                '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤': order['group_size']
            }
            for order in customer['past_orders']
        ])
        st.dataframe(history_df)

        # New Order Section
        st.header("‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà")

        available_categories = [
            category for category, details in st.session_state.menu.items()
            if current_service in details['available']
        ]

        selected_category = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
            options=available_categories
        )

        if selected_category:
            selected_items = st.multiselect(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
                options=st.session_state.menu[selected_category]['items']
            )

            if st.button("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"):
                new_order = {
                    'date': datetime.now().strftime('%Y-%m-%d'),
                    'time': datetime.now().strftime('%H:%M'),
                    'items': selected_items,
                    'group_size': group_size
                }
                customer['past_orders'].insert(0, new_order)
                st.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                st.experimental_rerun()

if __name__ == "__main__":
    main()